[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pytorch-hmm"
version = "0.2.2"
description = "Production-ready PyTorch HMM library for speech synthesis - 300x+ GPU acceleration, 95%+ test pass rate, 33% coverage, 25+ classes, 5 critical issues resolved"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Speech Synthesis Engineer", email = "engineer@example.com"},
]
maintainers = [
    {name = "Speech Synthesis Engineer", email = "engineer@example.com"},
]
keywords = ["hmm", "hidden-markov-model", "speech-synthesis", "pytorch", "tts", "alignment", "hsmm", "streaming", "neural-hmm", "mixture-gaussian", "dtw", "ctc", "real-time", "gpu-acceleration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-timeout>=2.1.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "ruff>=0.0.260",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-napoleon>=0.7",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinx-copybutton>=0.5.0",
]
audio = [
    "torchaudio>=0.12.0",
    "librosa>=0.9.0",
    "soundfile>=0.10.0",
]
visualization = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    "tensorboard>=2.10.0",
]
benchmarks = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "psutil>=5.9.0",
    "nvitop>=1.0.0",
    "pandas>=1.4.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
    "nbformat>=5.4.0",
    "nbconvert>=6.5.0",
    "jupyterlab>=3.4.0",
]
onnx = [
    "onnx>=1.12.0",
    "onnxruntime>=1.12.0",
]
utils = [
    "tqdm>=4.64.0",
    "rich>=12.0.0",
    "click>=8.0.0",
    "typer>=0.6.0",
]
# PyTorch accelerator 선택 옵션
cpu = [
    "torch>=1.12.0",
    "numpy>=1.21.0",
]
cuda = [
    "torch>=1.12.0",
    "numpy>=1.21.0",
]
all = [
    "pytorch-hmm[dev,docs,audio,visualization,benchmarks,notebooks,onnx,utils]",
]

[project.urls]
Homepage = "https://github.com/crlotwhite/pytorch_hmm"
Documentation = "https://pytorch-hmm.readthedocs.io"
Repository = "https://github.com/crlotwhite/pytorch_hmm.git"
Issues = "https://github.com/crlotwhite/pytorch_hmm/issues"
Changelog = "https://github.com/crlotwhite/pytorch_hmm/blob/main/CHANGELOG.md"

[project.scripts]
pytorch-hmm-test = "pytorch_hmm:run_quick_test"
pytorch-hmm-demo = "examples.advanced_features_demo:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-timeout>=2.1.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "ruff>=0.0.260",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
# PyTorch accelerator 충돌 방지 (CPU와 CUDA 동시 설치 방지)
conflicts = [
    [
        { extra = "cpu" },
        { extra = "cuda" },
    ],
]

[tool.uv.sources]
# PyTorch 특화 소스 설정 - optional dependencies에 따른 조건부 소스 선택
torch = [
    { index = "pytorch-cpu", extra = "cpu" },
    { index = "pytorch-cu124", extra = "cuda" },
]

# PyTorch 인덱스 정의
[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pytorch_hmm"]
known_third_party = [
    "torch",
    "numpy",
    "matplotlib",
    "seaborn",
    "librosa",
    "torchaudio",
    "pytest",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "onnx.*",
    "onnxruntime.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pytorch_hmm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
]

[tool.coverage.run]
source = ["pytorch_hmm"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert statements and shell usage in examples

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["B011"]     # Allow assert False in tests

[tool.ruff.mccabe]
max-complexity = 10
